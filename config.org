* My Emacs Configuration
** Bootstrap

Putting stuff here that might bite me if they aren't loaded early.

*** ~delight~

https://elpa.gnu.org/packages/delight.html

#+begin_src emacs-lisp
(use-package delight)
#+end_src

** Server

This opens a frame after Emacs daemon starts. Why? Well. It's a long story, and
the only reason I am memoralizing it here is so that I have a chance of
remembering what I was thinking if I ever have to explain this to anyone.

My workflow is built around the assumption that the code I am working on may or
may not be local to the machine I am working on. For cases where I need to work
remotely, I use [[https:www.gnu.org/software/tramp/][tramp]]. This mostly works fine. However, there are times where I
am SSH'd into the machine where most of my code is hosted via a terminal and I
would like a way to open a file or directory in Emacs without having to copy /
paste a path between the applications. By starting starting the server below
listening via TCP, I was able to open reverse emacsclient connections back to my
MacBook using this cobbled together function:

#+begin_src bash
function re {
    # Get the number of arguments
    local num_args=$#

    # If no arguments are provided, exit the function
    if [ $num_args -eq 0 ]; then
        echo "ðŸ¤– re (remote? reverse? emacsclient) ðŸ¤–"
        echo "Usage: re [emacsclient options] <path>"
        return 1
    fi

    # Extract the last argument as the path
    local tramppath="$1"

    # Check if a valid path was provided (should be the first arg)
    if [ -z "$tramppath" ]; then
        echo "Error: No path provided."
        return 1
    fi

    # Run the emacsclient command with -cn option and --server-file and /sshx options
    emacsclient -cn --server-file ~/server /sshx:$(hostname):$tramppath
}
#+end_src

This takes the local path I'm trying to open and passes a "tramp path" back to
the emacs server running on my laptop:

#+begin_src emacs-lisp
(defun open-initial-frame-when-daemonized ()
  (when (daemonp)
    (setq server-use-tcp t)
    (setq server-auth-key (getenv "EMACS_SERVER_AUTH_KEY"))
    (setq server-port 52698)

    (server-start)

    (make-frame '((display . "mac"))))) ;; Adjust "mac" if needed, depending on your display configuration

;; Run the function after the daemon starts
(add-hook 'after-init-hook 'open-initial-frame-when-daemonized)
#+end_src

I set ~EMACS_SERVER_AUTH_KEY~ and launch emacs via ~launchctl~. Since I
currently only run emacs as a daemon on macOS I do not have any conditional
logic here.

** Tabs and Spaces

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil tab-width 4)
(use-package sh-script
  :mode "\\.sh\\'"
  :config (setq sh-indentation 4 sh-basic-offset 4))
#+END_SRC

** Text and Programming Modes
*** ~python-mode~

#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "/Users/shanemcd/.pyenv/shims/python"
      flycheck-python-pycompile-executable "/Users/shanemcd/.pyenv/shims/python"
      python-shell-exec-path "/Users/shanemcd/.pyenv/shims/python")
#+END_SRC

*** ~markdown-mode~
#+BEGIN_SRC emacs-lisp

(use-package markdown-mode
  :config
  (setq markdown-fontify-code-blocks-natively t))
#+END_SRC

*** ~show-paren-mode~

#+BEGIN_SRC emacs-lisp
(show-paren-mode)
#+END_SRC

*** ~yaml-mode~

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :config
  (setq yaml-indent-offset 2))
#+END_SRC

*** ~groovy-mode~

#+BEGIN_SRC emacs-lisp
(use-package groovy-mode
  :config
  (setq groovy-indent-offset 2))
#+END_SRC

*** ~swift~

#+BEGIN_SRC emacs-lisp
(use-package swift-mode)
(use-package ob-swift)
#+END_SRC

*** ~go~

#+BEGIN_SRC emacs-lisp

(use-package go-mode
  :config
  (add-hook 'go-mode-hook
            (lambda ()
              (setq indent-tabs-mode 1)
              (setq tab-width 8))))
(use-package ob-go)
#+END_SRC

*** ~dockerfile-mode~

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode)
#+END_SRC

*** ~ob-mermaid~

#+begin_src emacs-lisp
(use-package ob-mermaid)
#+end_src

** Org Mode

*** ~org-mode~

#+BEGIN_SRC emacs-lisp
(use-package org
  :mode ("\\.org\\'" . org-mode)
  :bind (("C-c l" . org-store-link)
         ("C-c c" . org-capture)
         ("C-c a" . org-agenda)
         ("C-c C-w" . org-refile))
  :config
  (require 'org-tempo)
  (setq org-directory "~/org")
  (setq org-agenda-files (directory-files-recursively "~/org/" "\\.org$"))
  (setq org-use-speed-commands t)
  (setq org-startup-with-inline-images t)
  (setq org-capture-templates '(
                                ("t" "TODO" entry (file+headline "~/org/incoming.org" "TODOs") "** TODO %?\n  %i\n  %a")
                                ("e" "Log entry" entry (file+headline "~/org/log.org" "Log") "** %?\n  %i\n  %a")
                                ("p" "Private note" entry (file+headline "~/org/journal.org" "Notes") "** %?\n  %i\n  %a")
                                ))

  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  (setq org-imenu-depth 3)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell      . t)
     (emacs-lisp . t)
     (js         . t)
     (ruby       . t)
     (swift      . t)
     (mermaid . t)
     (python     . t)))
  (setq org-babel-python-command "python3")
  (setq org-startup-folded t)
  (setq org-odt-preferred-output-format "docx")
  (setq org-src-fontify-natively t
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t))

(use-package org-modern
  :hook (org-mode . global-org-modern-mode))

(use-package org-appear
  :init
  (add-hook 'org-mode-hook 'org-appear-mode))

(use-package ox-gfm)
#+END_SRC
** Terminal Emulation

*** ~vterm~

#+begin_src emacs-lisp
(use-package vterm)
#+end_src

** Interface Customizations
*** Columns

#+BEGIN_SRC emacs-lisp
(add-hook 'markdown-mode-hook 'auto-fill-mode)

(setq-default fill-column 80)
#+END_SRC

*** Disable Native UI Controls

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

*** Font

https://github.com/mozilla/Fira

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Fira Code"))
#+END_SRC

*** Hide Splash Screen

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC

*** Show column number in modeline

#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

*** Show Line Numbers

#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
#+END_SRC

*** Start w/ Maximized Window

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

*** Theme

#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :config
  (load-theme 'base16-tomorrow-night-eighties t))
#+END_SRC

*** Wind Move
https://www.emacswiki.org/emacs/WindMove

#+BEGIN_SRC emacs-lisp
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
#+END_SRC

** LLM

*** ~ellama~

#+begin_src emacs-lisp
(use-package ellama
  :bind ("C-c e" . ellama-transient-main-menu)
  :init
  (require 'llm-ollama)
  (setopt ellama-provider
	  (make-llm-ollama
	   :chat-model "gemma2:9b"
	   :embedding-model "gemma2:9b")))
#+end_src

** Misc Packages
*** ~browse-at-remote~
#+BEGIN_SRC emacs-lisp
(use-package browse-at-remote
  :commands browse-at-remote
  :bind ("C-c g g" . browse-at-remote))
#+END_SRC

*** ~company~

#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (setq company-minimum-prefix-length 1)
  (global-company-mode t)
  (setq company-global-modes '(not org-mode)))
#+END_SRC

*** ~dired~

- Set up key binding for ~dired-jump~.
  - If you enter a file from dired and press this shortcut, you will pop back
    into the dired buffer
- Only show filenames in dired by default, hiding the permissions and other
  details. Press ~(~ to show details.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-j") 'dired-jump)
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
;(use-package dired-single)
(require 'dired-x)
(add-hook 'dired-mode-hook 'dired-omit-mode)
(setq-default dired-omit-files-p t) ; Buffer-local variable
(setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
#+END_SRC

**** ~dired-subtree~

#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))
#+END_SRC

*** ~drag-stuff~
#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :config
  (drag-stuff-define-keys))
#+END_SRC

*** ~dumb-jump~

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :config
  (setq dumb-jump-selector 'helm)
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+END_SRC
*** ~fill-column-indicator~
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :config
  (setq-default fci-rule-column 80)
  (setq fci-rule-color (face-attribute 'highlight :background)))
#+END_SRC
*** ~flycheck~
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
  (global-flycheck-mode))
#+END_SRC

*** ~flyspell~

I unbind ~flyspell-mode-map~ because I use ~C-.~ for ~imenu-list~.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :defer t
  :config

  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'markdown-mode-hook 'flyspell-mode)
  (define-key flyspell-mode-map (kbd "C-.") nil))
#+END_SRC

*** ~helm~

#+BEGIN_SRC emacs-lisp
(use-package helm
  :delight
  :config
  (helm-mode t)

  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-c f r") 'helm-recentf)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-z")  'helm-select-action)

  (setq helm-ff-auto-update-initial-value nil)
  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  (setq helm-move-to-line-cycle-in-source nil)
  )

(use-package helm-themes)
#+END_SRC

**** ~helm-ag~

#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :bind ("C-c p" . helm-projectile-ag)
  :commands (helm-ag helm-projectile-ag)
  :init (setq helm-ag-insert-at-point 'symbol
	      helm-ag-command-option "--path-to-ignore ~/.agignore"))
#+END_SRC

*** ~htmlize~

#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :commands (htmlize-buffer
	     htmlize-file
	     htmlize-many-files
	     htmlize-many-files-dired
	     htmlize-region))
#+END_SRC

*** ~imenu-list~

#+BEGIN_SRC emacs-lisp
(use-package imenu-list
  :bind
  (("C-." . imenu-list-smart-toggle))
  :config
  (setq imenu-list-focus-after-activation t))
 #+END_SRC

*** ~tramp~

#+begin_src emacs-lisp
(use-package tramp
  :defer t)
#+end_src

*** ~magit~

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  (("C-x g" . magit-status))
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))
#+END_SRC

*** ~mwim~

"Move where I mean" - ~C-a~ takes you to the first character on the line.

#+BEGIN_SRC emacs-lisp
(use-package mwim
  :config
  (global-set-key (kbd "C-a") 'mwim-beginning)
  (global-set-key (kbd "C-e") 'mwim-end))
#+END_SRC

*** ~projectile~

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :commands (projectile-find-file projectile-switch-project)
  :diminish projectile-mode
  :init
  (use-package helm-projectile
    :bind
    (("M-t" . helm-projectile-find-file)
     ("s-p" . helm-projectile-find-file)
     ("s-P" . helm-projectile-switch-project)))
  :config
  (setq projectile-switch-project-action #'projectile-commander)
  (add-to-list 'projectile-globally-ignored-directories "*node_modules")
  (add-to-list 'projectile-globally-ignored-directories "*.tox")
  (projectile-global-mode)
  (helm-projectile-on))
#+END_SRC

*** ~rainbow-delimeters~

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

*** ~reveal-in-osx-finder~

#+BEGIN_SRC emacs-lisp
(use-package reveal-in-osx-finder)
#+END_SRC

*** ~vundo~


#+BEGIN_SRC emacs-lisp

(use-package vundo
  :commands (vundo)
  :config
  (setq vundo-compact-display t))
#+END_SRC

*** ~neotree~
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
(use-package neotree
  :config
  (setq neo-autorefresh t)
  (setq neo-window-fixed-size nil)
  (setq neo-reset-size-on-open nil)
  (eval-after-load "neotree"
    '(add-to-list 'window-size-change-functions
                  (lambda (frame)
                    (let ((neo-window (neo-global--get-window)))
                      (unless (null neo-window)
                        (setq neo-window-width (window-width neo-window)))))))
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  :bind
  (:map global-map
	("s-t"   . neotree-toggle)))
#+END_SRC

*** ~which-key~

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode)
  (which-key-setup-minibuffer))
#+END_SRC

*** ~ws-butler~


#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :config
  (ws-butler-global-mode t))
#+END_SRC

*** ~wttrin~
#+BEGIN_SRC emacs-lisp
(use-package wttrin
  :config
  (setq wttrin-default-cities '("New York NY" "Winchester VA" "Durham NC" "Kaohsiung City")))
#+END_SRC
*** ~ztree~
#+BEGIN_SRC emacs-lisp
(use-package ztree)
#+END_SRC

*** ~yassnippet~
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :commands yas-minor-mode
  :hook (go-mode . yas-minor-mode))
#+END_SRC

*** ~winum~
#+BEGIN_SRC emacs-lisp
(use-package winum
  :config
  (winum-mode)
  :bind
      (("M-0" . 'winum-select-window-0-or-10)
       ("M-1" . 'winum-select-window-1)
       ("M-2" . 'winum-select-window-2)
       ("M-3" . 'winum-select-window-3)
       ("M-4" . 'winum-select-window-4)
       ("M-5" . 'winum-select-window-5)
       ("M-6" . 'winum-select-window-6)
       ("M-7" . 'winum-select-window-7)
       ("M-8" . 'winum-select-window-8))
  )
#+END_SRC

#+begin_src emacs-lisp
(use-package pandoc-mode
  :config
  (add-hook 'markdown-mode-hook 'pandoc-mode))
#+end_src

** Misc

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c d") 'make-directory)
(setq backup-directory-alist `(("." . "~/.emacs.bak")))

(setenv "PINENTRY_USER_DATA" "USE_CURSES=0")
#+END_SRC


*** Require newlines at end of files
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC
*** Set up ~PATH~ on macOS

Ensure that the proper shell is used on macOS. For me, this was the solution to:

- An issue where my ~ssh-agent~ was not being used.
- ~/usr/local/bin/~ wasn't in emacs' ~PATH~.


#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (setq exec-path-from-shell-arguments '("-l"))
  (setenv "SHELL" "/bin/zsh")
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-env "GOPATH")
  (exec-path-from-shell-copy-env "PATH")
  (exec-path-from-shell-copy-env "LC_ALL")
  (exec-path-from-shell-copy-env "LANG")
  (exec-path-from-shell-copy-env "LC_TYPE")
  (exec-path-from-shell-copy-env "SSH_AGENT_PID")
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
  (exec-path-from-shell-copy-env "SHELL"))
#+END_SRC

*** macOS Keybindings
#+begin_src emacs-lisp
(global-set-key [(super a)] 'mark-whole-buffer)
(global-set-key [(super v)] 'yank)
(global-set-key [(super c)] 'kill-ring-save)
(global-set-key [(super x)] 'kill-region)
(global-set-key [(super s)] 'save-buffer)
(global-set-key [(super l)] 'goto-line)
(global-set-key [(super w)]
                (lambda () (interactive) (delete-window)))
(global-set-key [(super z)] 'undo)
(global-set-key [(super u)] 'revert-buffer)

(setq mac-option-modifier 'meta)
(setq mac-command-modifier 'super)
#+end_src
